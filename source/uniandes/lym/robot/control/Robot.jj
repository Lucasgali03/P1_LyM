/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	static HashMap<String,String> Variables = new HashMap< >();
	static int x;
	static boolean conde;
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN [IGNORE_CASE]: /* Nombres de Comandos */
{

			<MOV:  "Move">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < SKP:  "Skip" >
        
        | < DEFVAR: "Defvar" >
        | < DEFUN:"Defun" >

        
        | < TURN: "Turn" >
        | < FACE: "Face" >
        | < MOVEDIR: "Move-dir" >
        | < RUNDIRS: "run-dirs" >
        | < MOVEFACE:"Move-face" >
        | < NULL : "Null" >

        | < FRONT:"Front" >
        | < RIGHT:"Right" >
        | < LEFT:"Left" >
        | < BACK:"Back" >
        | < AROUND:"Around" >



        | < NORTH:"North" >
        | < SOUTH: "South" >
        | < WEST:"West" >
        | < EAST:"East" >


        |< IF:"If" >
        |< REPEAT:"Repeat" >

        | < FACING:"Facing" >
        | < BLOCKED:"Blocked" >
        | < CANPICK:"Can-pick" >
        | < CANPUT:"Can-put" >
        | < CANMOVE:"Can-move" >
        | < ZERO:"IsZero" >
        | < NOT:"Not" >

        | < DP:":" >
        | < LB:"(" >
        | < RB:")" >
        | < Q:"?" >


		| <BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
		 < CHAR : (< LETTER >)+ >
		| < CONSTANT : (< DIGIT >)+ >
		| <#DIGIT: ["0"-"9"] >
		| < #LETTER : ["a" - "z", "A" - "Z"] >
        
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  laCondicion(){ salida = "Command: IF"; }
		  | todo()

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}
void todo(): { int x,y;}
{
  < LB >(
		  
		 	basicos(salida) 
		| declaroVariables() { salida = "Command: Defvar"; }
		| direction(salida)
		| movDir(salida)
		| rundir(salida)
		| 	<GO>  <LB > x=num() "," y=num()< RB > {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> <DP >put() 					  			
		|  <PICK> <DP >get()	
	    |  < POP > <LB > x=num() < RB > {world.popBalloons(x); salida = "Comando:  Pop";}
		) < RB >
}
	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>  f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<CONSTANT>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	void basicos( String salida): { }
	{ 
	  (< MOV > (x=num()|x= getValor()) {world.moveForward(x,false);salida = "Command: Moveforward ";} 
	  |< SKP >(x=num()|x= getValor()) {world.moveForward(x,true);salida = "Command:Jumpforward ";}	  )
	  
	}
	void direction(String salida): { }
	{
	  
	  (< FACE >< DP >
	  (< LEFT >{world.turnRight();world.turnRight();world.turnRight();salida = "Command: TurnLeft";}
	  | < RIGHT >{world.turnRight();salida = "Command: Turnright";}
	  | < AROUND >{world.turnRight();world.turnRight();salida = "Command: TurnAround";})
	  
	| < TURN > apuntarDic()	  )
	 
	}
	void apuntar(): { }
	{
	  //hacer que en world se apunte hacia una direccion
	< DP >
	(< FRONT > { salida = "Command:Front"; }
      | < LEFT >{world.turnRight();world.turnRight();world.turnRight();salida = "Command: Left";}
	  | < RIGHT >{world.turnRight();salida = "Command: right";}
	  | < BACK >{world.turnRight();world.turnRight();salida = "Command: back";}	)
	
}
	void apuntarDic(): { }
	{
	  //hacer que en world se apunte hacia una direccion
	<DP >
	(< NORTH >  ajustarDic( 0 )
	| < SOUTH >ajustarDic( 1 )
	| < EAST >ajustarDic( 2 )
	| < WEST >ajustarDic( 3 )
	) }
	
	void ajustarDic(int y): { }
	{ { int apunt = world.getFacing();
	// norte 
	if (apunt == 0) {
	  if(y == 1) {
	    world.turnRight();
	    world.turnRight();
	  }
	  else if(y == 2) {
	    world.turnRight();
	    
	  }
	  else if(y == 3) {
	    world.turnRight();
	    world.turnRight();
	    world.turnRight();
	  }
	}
	// sur
	else if (apunt == 1) {
	  if(y == 0) {
	    world.turnRight();
	    world.turnRight();
	  }
	  else if(y == 3) {
	    world.turnRight();
	    
	  }
	  else if(y == 1) {
	    world.turnRight();
	    world.turnRight();
	    world.turnRight();
	  }
	}
	// este 
	else if (apunt == 2) {
	  if(y == 3) {
	    world.turnRight();
	    world.turnRight();
	  }
	  else if(y == 1) {
	    world.turnRight();
	    
	  }
	  else if(y == 0) {
	    world.turnRight();
	    world.turnRight();
	    world.turnRight();
	  }
	}
	// oeste 
	else if (apunt == 3) {
	  if(y == 2) {
	    world.turnRight();
	    world.turnRight();
	  }
	  else if(y == 0) {
	    world.turnRight();
	    
	  }
	  else if(y == 1) {
	    world.turnRight();
	    world.turnRight();
	    world.turnRight();
	  }
	}
	
}
	}

	void movDir(String salida): { }
	{
	  
	(	  < MOVEDIR >(x=num()|x= getValor()) apuntar(){world.moveForward(x,false);salida = "Command: MOVE-DIR ";}
	|  < MOVEFACE >(x=num()|x= getValor()) apuntarDic(){world.moveForward(x,false);salida = "Command: MOVE-FACE";}
	)     
}
	void rundir(String salida): { }
	{
	  < RUNDIRS > (apuntar())+
	  
	}
	
	void declaroVariables(): { }
{
	< DEFVAR > < CHAR > { String key = token.image; }
  (
    < CONSTANT > { String value = token.image; }
    
  )
  {
    Variables.put(key, value);
  }

}
int getValor(): { }
{
   <CHAR >
  { 
    String valor = token.image; 
    if (!Variables.containsKey(valor)) {
    throw new ParseException("\nUndefined variable");
  }
    else {
      String numero = Variables.get(valor);
    return Integer.parseInt(numero); }

  }
}
boolean condiciones(): { }
  {
    (
    < FACING ><Q > { return dondeve(); }
  | < BLOCKED ><Q > { return bloqueado();}
  | < CANPUT > <Q >(< CHIPS > (x=getValor()|x=num()) {if (world.getMyChips()<  x) { conde= false; } else { conde= true; } }
  					|<BALLOONS>)(x=getValor()|x=num()){if (world.getMyBalloons()<  x) { conde= false; } else { conde= true; } }

  
  | < CANPICK ><Q >(< CHIPS > (x=getValor()|x=num()) { conde= recogerChips(x); }
  					|<BALLOONS>)(x=getValor()|x=num()) { conde= recogerBallons(x);}
  | < CANMOVE ><Q > apuntarDic() { }
  | < ZERO > (x=getValor()|x=num()) {if (x!= 0) { conde= false; }else { conde= true; } }
)  
  }
void laCondicion(): { }
// falta revisar como hacer cuando la condicion sea falsa
{< IF ><LB > condiciones() < RB > todo()

}
boolean recogerChips(int a ): { }
{ {int chi = world.chipsToPick();
	if (chi >= a) { return true;}
  else { return false;}
}
}
boolean recogerBallons(int a ): { }
{ {
  int globos = world.countBalloons(world.getPosition());
  if (globos >= a) { return true;}
  else { return false;}

	
}
}
boolean bloqueado(): { }
{ {try {
  world.moveForward(1,false);
  world.moveForward(-1,false);
  return false;
} catch (Exception Error){
  return true;
}
	
}
}

boolean dondeve(): { }
{
  (< NORTH > { return world.facingNorth(); }
	| < SOUTH >{ return world.facingSouth(); }
	| < EAST >{ return world.facingEast(); }
	| < WEST >{ return world.facingWest(); }
	)
}

	





