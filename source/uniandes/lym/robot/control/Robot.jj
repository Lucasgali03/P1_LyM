/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	static HashMap<String,String> Variables = new HashMap< >();
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN [IGNORE_CASE]: /* Nombres de Comandos */
{

			<MOV:  "Move">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < SKP:  "Skip" >
        
        | < DEFVAR: "Defvar" >
        | < DEFUN:"Defun" >

        
        | < TURN: "Turn" >
        | < FACE: "Face" >
        | < MOVEDIR: "Move-dir" >
        | < RUNDIRS: "run-dirs" >
        | < MOVEFACE:"Move-face" >
        | < NULL : "Null" >

        | < FRONT:"Front" >
        | < RIGHT:"Right" >
        | < LEFT:"Left" >
        | < BACK:"Back" >



        | < NORTH:"North" >
        | < SOUTH: "South" >
        | < WEST:"West" >
        | < EAST:"East" >


        |< IF:"If" >
        |< REPEAT:"Repeat" >

        | < FACING:"Facing" >
        | < BLOCKED:"Blocked" >
        | < CANPUT:"Can-put" >
        | < CANMOVE:"Can-move" >
        | < ZERO:"IsZero" >
        | < NOT:"Not" >

        | < DP:":" >
        | < LB:"(" >
        | < RB:")" >
        | < Q:"?" >


		| <BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
		 < CHAR : (< LETTER >)+ >
		| < CONSTANT : (< DIGIT >)+ >
		| <#DIGIT: ["0"-"9"] >
		| < #LETTER : ["a" - "z", "A" - "Z"] >
        
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  < LB >(
		  
		 	{ salida =basicos(x,salida) }
		| declaroVariable() { salida = "Command: Defvar"; }
		| { salida= direction(salida) }
		| { salida= movDir(salida) }
		| { salida= rundir(salida) }
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> <DP >put() 					  			
		|  <PICK> <DP >get()	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) < RB >

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>  f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<CONSTANT>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	String basicos(int x, String salida): { }
	{
	  (< MOV > (x=num()|x= getValor()) {world.moveForward(x,false);salida = "Command: Moveforward ";} 
	  |< SKP >(x=num()|x= getValor()) {world.moveForward(x,true);salida = "Command:Jumpforward ";}	  )
	  { return salida; }
	}
	String direction(String salida): { }
	{
	  
	  (< FACE >< DP >
	  (< LEFT >
	  | < RIGTH >{world.turnRight();salida = "Command: Turnright";}
	  | < AROUND >)
	  
	| < TURN > apuntarDic()	  )
	  { return salida; }
	}
	void apuntar(): { }
	{
	  //hacer que en world se apunte hacia una direccion
	< DP >
	(< FRONT >
    |< RIGHT >
    | < LEFT >
    | < BACK > 	)
	
}
	void apuntarDic(): { }
	{
	  //hacer que en world se apunte hacia una direccion
	<DP >
	(< NORTH > 
	| < SOUTH >
	| < EAST >
	| < WEST >
	)
}
	String movDir(String salida): { }
	{
	  
	(	  < MOVEDIR >(x=num()|x= getValor()) apuntar(){world.moveForward(x,false);salida = "Command: MOVE-DOR ";}
	|  < MOVEFACE >(x=num()|x= getValor()) apuntarDic(){world.moveForward(x,false);salida = "Command: MOVE-FACE";}
	)     { return salida; }}

	String rundir(String salida): { }
	{
	  < RUNDIRS > (apuntar())+{world.moveForward(x,false);salida = "Command: RUN-DIRS ";}
	  { return salida; }}
	}
	
	void declaroVariables(): { }
{
	< DEFVAR > < CHAR > { String key = token.image; }
  (
    < CONSTANT > { String value = token.image; }
    
  )
  {
    Variables.put(key, value);
  }

}
void getValor(): { }
{
   <CHAR >
  { 
    String valor = token.image; 
    if (!Variables.containsKey(valor)) {
    throw new ParseException("\nUndefined variable");
}
  }
}

	